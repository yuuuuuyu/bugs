import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.53eb7688.js";const p="/bugs/assets/1.df0fa7e2.png",b=JSON.parse('{"title":"使用代码片段重写表格列的三种方式","description":"","frontmatter":{},"headers":[],"relativePath":"skills/beeboat/1.md","filePath":"skills/beeboat/1.md"}'),o={name:"skills/beeboat/1.md"},e=l(`<h1 id="使用代码片段重写表格列的三种方式" tabindex="-1">使用代码片段重写表格列的三种方式 <a class="header-anchor" href="#使用代码片段重写表格列的三种方式" aria-label="Permalink to &quot;使用代码片段重写表格列的三种方式&quot;">​</a></h1><h2 id="功能概述" tabindex="-1">功能概述 <a class="header-anchor" href="#功能概述" aria-label="Permalink to &quot;功能概述&quot;">​</a></h2><p>满足表格列重写需求，提供了一种全新的重写方式。该方式无需复制base中生成的全量表格代码，只需在base同级目录下创建components/[功能名]/index.fragment.html。将重写列的代码放在index.fragment.html内即可。</p><h2 id="项目配置" tabindex="-1">项目配置 <a class="header-anchor" href="#项目配置" aria-label="Permalink to &quot;项目配置&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install vite-plugin-beeboat-ui</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install vite-plugin-beeboat-ui</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><p>build/plugin.ts增加配置，代码如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 其他包导入</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> BeeboatUIPlugin </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite-plugin-beeboat-ui&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 其他方法</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPluginsList</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">command</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">env</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">lifecycle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> p<wbr>rocess.env.npm_lifecycle_event</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">BeeboatUIPlugin</span><span style="color:#E1E4E8;">({})，</span><span style="color:#6A737D;">// 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 其他插件</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">｝</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 其他包导入</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> BeeboatUIPlugin </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite-plugin-beeboat-ui&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 其他方法</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getPluginsList</span><span style="color:#24292E;">(</span><span style="color:#E36209;">command</span><span style="color:#24292E;">, </span><span style="color:#E36209;">env</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">lifecycle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> p<wbr>rocess.env.npm_lifecycle_event</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">BeeboatUIPlugin</span><span style="color:#24292E;">({})，</span><span style="color:#6A737D;">// 配置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 其他插件</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">｝</span></span></code></pre></div><p><em><strong>此处配置需要在蜂舟的配置文件中增加！！！！！！！！！</strong></em></p><h2 id="相关代码" tabindex="-1">相关代码 <a class="header-anchor" href="#相关代码" aria-label="Permalink to &quot;相关代码&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- components/bt-table-ex-abnormal-view/index.fragment.html --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- formatter: BtTableExColumn[columnName]Content --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#BtTableExColumnfirstLevelAnomalyNameContent</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scope&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    [重写内容]{{ scope.row.firstLevelAnomalyName }}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- formatter: BtTableExColumn[columnName]Header --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#BtTableExColumnsecondLevelAnomalyNameHeader</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;scope&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    [重写列名]{{scope.column.label}}</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#eventDescription</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ column }&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 保持elementplus的格式 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">el-table-column</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-bind</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;column&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">label</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;重写列名&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">#default</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;{ row, column }&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            [重写内容]</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">el-table-column</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- components/bt-table-ex-abnormal-view/index.fragment.html --&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- formatter: BtTableExColumn[columnName]Content --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#BtTableExColumnfirstLevelAnomalyNameContent</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scope&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    [重写内容]{{ scope.row.firstLevelAnomalyName }}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- formatter: BtTableExColumn[columnName]Header --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#BtTableExColumnsecondLevelAnomalyNameHeader</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;scope&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    [重写列名]{{scope.column.label}}</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#eventDescription</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ column }&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 保持elementplus的格式 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">el-table-column</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">v-bind</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;column&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">label</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;重写列名&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">template</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">#default</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;{ row, column }&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            [重写内容]</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">el-table-column</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">template</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><p><a href="http://beet-docs.hive-df.com/docs/components/table-ex/" target="_blank" rel="noreferrer">BeeboatUI文档网站-BtTableEx相关文档</a></p><h2 id="实际效果" tabindex="-1">实际效果 <a class="header-anchor" href="#实际效果" aria-label="Permalink to &quot;实际效果&quot;">​</a></h2><p><img src="`+p+'" alt="使用代码片段重写表格列效果"></p><h2 id="优势说明" tabindex="-1">优势说明 <a class="header-anchor" href="#优势说明" aria-label="Permalink to &quot;优势说明&quot;">​</a></h2><ol><li>无需全量复制base生成的bt-table-ex</li><li>功能对应的vue文件依旧保持生成的代码量</li><li>代码结构清晰</li></ol>',15),t=[e];function c(r,E,y,i,m,u){return a(),n("div",null,t)}const g=s(o,[["render",c]]);export{b as __pageData,g as default};
