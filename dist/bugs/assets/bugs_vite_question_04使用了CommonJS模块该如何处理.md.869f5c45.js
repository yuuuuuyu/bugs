import{_ as s,c as a,o as n,Q as o}from"./chunks/framework.4df21498.js";const l="/bugs/assets/功能报错.0e66a768.png",p="/bugs/assets/浏览器解析后代码.f6fd17ee.png",e="/bugs/assets/源码.faa916d1.png",t="/bugs/assets/组件源码.54f2a873.png",D=JSON.parse('{"title":"使用了CommonJS模块该如何处理","description":"","frontmatter":{},"headers":[],"relativePath":"bugs/vite/question/04使用了CommonJS模块该如何处理.md","filePath":"bugs/vite/question/04使用了CommonJS模块该如何处理.md"}'),c={name:"bugs/vite/question/04使用了CommonJS模块该如何处理.md"},r=o('<h1 id="使用了commonjs模块该如何处理" tabindex="-1">使用了CommonJS模块该如何处理 <a class="header-anchor" href="#使用了commonjs模块该如何处理" aria-label="Permalink to &quot;使用了CommonJS模块该如何处理&quot;">​</a></h1><blockquote><p>TODO 关于技术选型</p><p>在业务需要第三方库的时候需要进行技术选型，其中一点需要关注目标库的作者是否持续在更新迭代。</p><p>如果长时间已经不更新了，需要注意了，库的格式可能不支持ESModule</p></blockquote><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>项目内需要前端实现Word导出，于是面向CSDN有了 <a href="https://blog.csdn.net/Coludidi/article/details/129730054" target="_blank" rel="noreferrer">demo</a>，demo中使用的第三方依赖其中一个是<code>docxtemplater-image-module-free</code>，本地开发一切正常，但是部署线上环境报错，导出功能报错。</p><p><em><strong>浏览器报错</strong></em><img src="'+l+'" alt="浏览器报错"><em><strong>线上环境浏览器解析后的代码</strong></em><img src="'+p+'" alt="浏览器解析后代码"><em><strong>功能代码</strong></em><img src="'+e+'" alt="功能代码"><em><strong>依赖源码</strong></em><img src="'+t+`" alt="依赖源码"></p><h2 id="产生原因" tabindex="-1">产生原因 <a class="header-anchor" href="#产生原因" aria-label="Permalink to &quot;产生原因&quot;">​</a></h2><p>通过对解析后的代码以及找到功能代码，可以看出<code>ImageModule</code>模块是由<code>docxtemplater-image-module-free</code>导出的。在<code>new ImageModule</code>的时候报错is not a constructor，说明依赖有问题</p><p>所以直接查看<code>docxtemplater-image-module-free</code>源码，通过源码可以看出当前这个依赖是CommonJS产物。当前项目构建方案使用Vite，所以问题在此，Vite是基于ESM的，无法直接处理CommonJS的</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to &quot;解决方案&quot;">​</a></h2><h3 id="方案1-使用动态导入方案" tabindex="-1">方案1: 使用动态导入方案 <a class="header-anchor" href="#方案1-使用动态导入方案" aria-label="Permalink to &quot;方案1: 使用动态导入方案&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// import * as ImageModule from &#39;docxtemplater-image-module-free&#39;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exportWord</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">tempDocxPath</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">fileName</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">imgSize</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 动态导入</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;docxtemplater-image-module-free&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(({ </span><span style="color:#FFAB70;">default</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">ImageModule</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 使用 ImageModule</span></span>
<span class="line"><span style="color:#E1E4E8;">            JSZipUtils.</span><span style="color:#B392F0;">getBinaryContent</span><span style="color:#E1E4E8;">(tempDocxPath, (</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> doc </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Docxtemplater</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">                doc.</span><span style="color:#B392F0;">attachModule</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ImageModule</span><span style="color:#E1E4E8;">(opts)) </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#E1E4E8;">                doc.</span><span style="color:#B392F0;">loadZip</span><span style="color:#E1E4E8;">(zip)</span></span>
<span class="line"><span style="color:#E1E4E8;">                doc.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">// 其他代码</span></span>
<span class="line"><span style="color:#E1E4E8;">            })</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Cannot load the module&#39;</span><span style="color:#E1E4E8;">, error)</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// import * as ImageModule from &#39;docxtemplater-image-module-free&#39;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exportWord</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">tempDocxPath</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">, </span><span style="color:#E36209;">fileName</span><span style="color:#24292E;">, </span><span style="color:#E36209;">imgSize</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 动态导入</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;docxtemplater-image-module-free&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(({ </span><span style="color:#E36209;">default</span><span style="color:#24292E;">: </span><span style="color:#E36209;">ImageModule</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 使用 ImageModule</span></span>
<span class="line"><span style="color:#24292E;">            JSZipUtils.</span><span style="color:#6F42C1;">getBinaryContent</span><span style="color:#24292E;">(tempDocxPath, (</span><span style="color:#E36209;">error</span><span style="color:#24292E;">, </span><span style="color:#E36209;">content</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 其他代码</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> doc </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Docxtemplater</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">                doc.</span><span style="color:#6F42C1;">attachModule</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ImageModule</span><span style="color:#24292E;">(opts)) </span><span style="color:#6A737D;">// </span></span>
<span class="line"><span style="color:#24292E;">                doc.</span><span style="color:#6F42C1;">loadZip</span><span style="color:#24292E;">(zip)</span></span>
<span class="line"><span style="color:#24292E;">                doc.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6A737D;">// 其他代码</span></span>
<span class="line"><span style="color:#24292E;">            })</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">(</span><span style="color:#E36209;">error</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Cannot load the module&#39;</span><span style="color:#24292E;">, error)</span></span>
<span class="line"><span style="color:#24292E;">        })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="方案2-使用-rollup-plugin-commonjs" tabindex="-1">方案2: 使用<code>@rollup/plugin-commonjs</code> <a class="header-anchor" href="#方案2-使用-rollup-plugin-commonjs" aria-label="Permalink to &quot;方案2: 使用\`@rollup/plugin-commonjs\`&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">@rollup/plugin-commonjs</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#032F62;">@rollup/plugin-commonjs</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> commonjs </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    plugins: [</span><span style="color:#B392F0;">commonjs</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 其他配置</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// vite.config.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> commonjs </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@rollup/plugin-commonjs&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// https://vitejs.dev/config/</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他配置</span></span>
<span class="line"><span style="color:#24292E;">    plugins: [</span><span style="color:#6F42C1;">commonjs</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 其他配置</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>不局限于当前场景，只要发现用到了CommonJS产物的依赖，都可以使用这两种方案。</p>`,16),E=[r];function y(i,d,m,g,u,h){return n(),a("div",null,E)}const A=s(c,[["render",y]]);export{D as __pageData,A as default};
